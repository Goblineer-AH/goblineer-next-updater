name: .NET

on:
  push:
    # branches: [ master ]
  pull_request:
    # branches: [ master ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Test
      run: dotnet test --no-build --verbosity normal
  docker:
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Setting the docker tag
        run: |
            if [[ "$BRANCH" == "refs/heads/master" ]]; then
              DOCKER_TAG="$BASE_TAG:latest"
            elif [[ "$BRANCH" == "refs/heads/staging" ]]; then
              DOCKER_TAG="$BASE_TAG:staging"
            else
              DOCKER_TAG="$BASE_TAG:beta"
            fi
            echo "Docker tag will be '$DOCKER_TAG'"
            echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
        env:
          BRANCH: ${{ github.ref }}
          BASE_TAG: goblineer/goblineer-next-updater

        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.DOCKER_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}